// This file was auto-generated by the Agent. Please review before submitting.
import { BoardService } from './board.service';
import * as boardRepository from '../data/board.repository';

// Mock the board repository functions
jest.mock('../data/board.repository');

describe('BoardService', () => {
    let boardService: BoardService;

    beforeEach(() => {
        boardService = new BoardService();
        jest.clearAllMocks();
    });

    it('should create a board', async () => {
        const boardData = { name: 'Test Board' };
        const mockBoard = { id: '1', ...boardData };
        (boardRepository.createBoard as jest.Mock).mockResolvedValue(mockBoard);

        const result = await boardService.createBoard(boardData);

        expect(boardRepository.createBoard).toHaveBeenCalledWith(boardData);
        expect(result).toEqual(mockBoard);
    });

    it('should get all boards', async () => {
        const mockBoards = [{ id: '1', name: 'Board 1' }, { id: '2', name: 'Board 2' }];
        (boardRepository.getAllBoards as jest.Mock).mockResolvedValue(mockBoards);

        const result = await boardService.getAllBoards();

        expect(boardRepository.getAllBoards).toHaveBeenCalled();
        expect(result).toEqual(mockBoards);
    });

    it('should get board by id', async () => {
        const boardId = 1;
        const mockBoard = { id: '1', name: 'Test Board' };
        (boardRepository.getBoardById as jest.Mock).mockResolvedValue(mockBoard);

        const result = await boardService.getBoardById(boardId);

        expect(boardRepository.getBoardById).toHaveBeenCalledWith(boardId);
        expect(result).toEqual(mockBoard);
    });

    it('should update board', async () => {
        const boardId = 1;
        const updateData = { name: 'Updated Board' };
        const mockBoard = { id: '1', name: 'Updated Board' };
        (boardRepository.updateBoard as jest.Mock).mockResolvedValue(mockBoard);

        const result = await boardService.updateBoard(boardId, updateData);

        expect(boardRepository.updateBoard).toHaveBeenCalledWith(boardId, updateData);
        expect(result).toEqual(mockBoard);
    });

    it('should delete board', async () => {
        const boardId = 1;
        (boardRepository.deleteBoard as jest.Mock).mockResolvedValue(true);

        const result = await boardService.deleteBoard(boardId);

        expect(boardRepository.deleteBoard).toHaveBeenCalledWith(boardId);
        expect(result).toEqual(true);
    });
});